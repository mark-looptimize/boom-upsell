{
  "version": 3,
  "sources": ["../src/UpsellOfferInstaller.ts", "../src/repository/LocalStorageDataRepository.ts", "../src/strategies/BlendedUpsellStrategy.ts", "../src/InCartUpsellService.ts", "../src/index.ts"],
  "sourcesContent": ["import { Item } from \"./repository/DataRepositoryInterface.js\";\n\n// Responsible for making sure the upsell offer element is correctly placed on the page\nexport class UpsellOfferInstaller {\n  #product: Item;\n\n  constructor(product: Item) {\n    this.#product = product;\n    this.#installComponent();\n  }\n\n  #installComponent(){\n    console.log(this.#product);\n  }\n}", "import { DataRepository, InCartItem, InMemoryDatabase, Item, ItemViewData } from \"./DataRepositoryInterface.js\";\n\nconst localStorageKey = 'looptimize_icu';\n\nexport class LocalStorageDataRepository implements DataRepository {\n  \n  #productViews: InMemoryDatabase;\n\n  constructor(){\n    this.#productViews = this.#fetchDataFromLocalStorage();\n  }\n\n  registerItemView(item: Item): void {\n    const productId = item.ProductID;\n\n    if (this.#productViews.has(productId)) {\n      // Increment the view count\n      const productViewData = this.#productViews.get(productId)!;\n      productViewData.views++;\n      this.#productViews.set(productId, productViewData);\n    } else {\n      this.#productViews.set(productId, {\n        product: item,\n        views: 1\n      });\n    }\n\n    this.#persistData();\n  }\n\n  get itemsInCart(): InCartItem[] {\n    if(window.OCUIncart.cart_items !== undefined){\n      const inCartItems = window.OCUIncart.cart_items as InCartItem[];\n      return inCartItems;\n    }\n\n    throw new Error(\"Unable to determine in cart items\");\n  }\n\n  public get productsViewed(): InMemoryDatabase {\n    this.#productViews = this.#fetchDataFromLocalStorage();\n    return this.#productViews;\n  }\n\n  #persistData(): void {\n    const serializedData = JSON.stringify(this.#productViews);\n    window.localStorage.setItem(localStorageKey, serializedData);\n  }\n\n  #fetchDataFromLocalStorage(): InMemoryDatabase {\n    const localStorageData = window.localStorage.getItem(localStorageKey);\n\n    if (localStorageData === null) {\n      return new Map<number, ItemViewData>();\n    } else {\n      const deserializedData: InMemoryDatabase = JSON.parse(localStorageData);\n      return deserializedData;\n    }\n  }\n}", "import { DataRepository, InMemoryDatabase, Item, ItemViewData } from \"../repository/DataRepositoryInterface.js\";\nimport { UpsellStrategy } from \"./UpsellStrategyInterface.js\";\n\n/*\n  Blended Strategy will determine the most apporpriate opportunity\n  by multiplying the number of times a product was viewed with the price \n  of the item to calculate an [upsellScore] that we can then use to \n  rank our opportunities and find the most appropriate one.\n*/\nexport class BlendedUpsellStrategy implements UpsellStrategy {\n  #dataRepository: DataRepository;\n\n  constructor(dataRepository: DataRepository){\n    this.#dataRepository = dataRepository;\n  }\n\n  findBestOffer(): Item {\n    const itemsInCart = this.#dataRepository.itemsInCart;\n    const viewedItems = this.#dataRepository.productsViewed;\n    const rankedItems = this.#rankItems(viewedItems);\n\n    let bestOffer: Item | undefined;\n\n    // Move through the ranked list of product views and check if that item\n    // already exists in the cart and stop looking when we find a match\n    // https://masteringjs.io/tutorials/fundamentals/foreach-break\n    rankedItems.every(item => {\n      const productId = item.product.ProductID;\n      const matchingItemInCart = itemsInCart.find(item => item.product_id = productId);\n      if (!matchingItemInCart) {\n        bestOffer = item.product;\n        return false;\n      }\n      return true;\n    });\n\n    if (bestOffer !== undefined) {\n      return bestOffer;\n    }\n\n    // If we made it this far we don't have any good offers worth showing.\n    throw new Error(\"No suitable upsell offer found\");\n  }\n\n  #calculateUpsellScore(itemViewData: ItemViewData): number{\n    const productViewCount = itemViewData.views;\n    const productPrice = parseFloat(itemViewData.product.Price.substring(1));\n\n    const upsellScore = productViewCount * productPrice;\n    return upsellScore;\n  }\n\n  // Assign each product view a score based on a combination of views and price and \n  // then rank them from highest to lowest to find the best potential upsell offers.\n  #rankItems(productViews: InMemoryDatabase): ItemViewData[]{\n    const scoredItemViews: ItemViewData[] = [];\n    productViews.forEach(item => {\n      const computedScore = this.#calculateUpsellScore(item);\n      item.score = computedScore;\n      scoredItemViews.push(item);\n    });\n\n    const sortedProductViews = scoredItemViews.sort(this.#compareProductViews).reverse();\n\n    return sortedProductViews;\n  }\n  \n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#description\n  #compareProductViews(a: ItemViewData, b: ItemViewData): number{\n    if (a.score === undefined || b.score === undefined) {\n      return 0;\n    }\n\n    if (a.score < b.score) {\n      return -1;\n    }\n\n    if (a.score > b.score) {\n      return 1;\n    }\n\n    return 0;\n  }\n}", "import { UpsellOfferInstaller } from \"./UpsellOfferInstaller.js\";\nimport { DataRepository, Item } from \"./repository/DataRepositoryInterface.js\";\nimport { LocalStorageDataRepository } from \"./repository/LocalStorageDataRepository.js\";\nimport { BlendedUpsellStrategy } from \"./strategies/BlendedUpsellStrategy.js\";\nimport { UpsellStrategy } from \"./strategies/UpsellStrategyInterface.js\";\n\nexport enum UpsellStrategyOption { BLENDED, DEFAULT };\n\nexport enum DataSource { TEST, LOCAL_STORAGE };\n\nexport interface FeatureConfiguration {\n  debugMode?: boolean,\n  dataSource: DataSource,\n  upsellStrategy: UpsellStrategyOption,\n}\n\nexport class InCartUpsellService {\n  #dataRepository: DataRepository\n\n  #upsellStrategy: UpsellStrategy\n\n  #upsellProduct?: Item\n\n  #eligibleForTest: boolean;\n\n  constructor(config: FeatureConfiguration) {\n    this.#dataRepository = this.#getDataRepository(config.dataSource);\n    this.#upsellStrategy = this.#initializeUpsellStrategy(config.upsellStrategy, this.#dataRepository);\n    this.#eligibleForTest = this.#isUserEligibleForTest();\n    if (this.#eligibleForTest) {\n      this.#onTestEligibility();\n    }\n  }\n\n  /**\n   * Registers a page view for a given item\n   */\n  public registerProductView() {\n    if (window.item === undefined || window.item === null) {\n      return;\n    } else {\n      const item: Item = window.item;\n      this.#dataRepository.registerItemView(item);  \n    }\n  }\n\n  #isUserEligibleForTest(): boolean {\n    try {\n      this.#checkForDealbreakers();\n      this.#upsellProduct = this.#upsellStrategy.findBestOffer();\n      // The user is eligible for the test!\n      // Only now should we figure out if we should show A or B not before.\n      return true;\n    } catch (error: any) {\n      window.dataLayer?.push({\n        \"event\": \"exception\",\n        \"details\": error.message\n      });\n      return false;\n    }\n  }\n\n  #checkForDealbreakers(): void{\n    const supportsCustomElements = ('customElements' in window)\n    if (!supportsCustomElements) {\n      throw new Error(\"Browser does not support Custom Elements\");\n    }\n  }\n\n  #onTestEligibility(): void {\n    // Step 1: Quick safety check\n    if (this.#upsellProduct === undefined) {\n      throw new Error(\"Upsell Product is not defined\");\n    }\n\n    // Step 2: Install an event listener\n    window.addEventListener('upsell_test_control', this.#implementControlExperience);\n    window.addEventListener('upsell_variant_group', this.#implementVariantExperience);\n\n    // Step 3: Communicate test eligibility with the testing tool via custom event\n    window.dataLayer?.push({\n      \"event\": \"in_cart_upsell_test_trigger\"\n    });\n  }\n\n  #initializeUpsellStrategy(option: UpsellStrategyOption, dataSource: DataRepository): UpsellStrategy{\n    switch (option) {\n      case UpsellStrategyOption.BLENDED:\n        return new BlendedUpsellStrategy(dataSource);\n      default:\n        throw new Error(\"Invalid Upsell Strategy option\");\n    }\n  }\n\n  #getDataRepository(option: DataSource): DataRepository {\n    switch (option) {\n      case DataSource.LOCAL_STORAGE:\n        return new LocalStorageDataRepository();\n      default:\n        throw new Error(\"Invalid Data Source option\");\n    }\n  }\n\n  #implementControlExperience(){\n    window.dataLayer?.push({\n      \"event\": \"upsell_default_experience\"\n    });\n  }\n\n  #implementVariantExperience(){\n    window.dataLayer?.push({\n      \"event\": \"upsell_variant_experience\"\n    });\n\n    // Disable the default experience\n    window.OCUIncart = null;\n\n    new UpsellOfferInstaller(this.#upsellProduct!);\n  }\n}", "import { DataSource, FeatureConfiguration, InCartUpsellService, UpsellStrategyOption } from \"./InCartUpsellService.js\";\n\nconst inCartUpsellConfig: FeatureConfiguration = {\n  dataSource: DataSource.LOCAL_STORAGE,\n  upsellStrategy: UpsellStrategyOption.BLENDED\n};\n\nexport const inCartUpsell = new InCartUpsellService(inCartUpsellConfig); "],
  "mappings": "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",
  "names": ["__classPrivateFieldSet", "__classPrivateFieldGet", "_LocalStorageDataRepository_fetchDataFromLocalStorage", "__classPrivateFieldSet", "__classPrivateFieldGet", "item", "_BlendedUpsellStrategy_rankItems", "_BlendedUpsellStrategy_compareProductViews", "UpsellStrategyOption", "DataSource", "__classPrivateFieldSet", "__classPrivateFieldGet", "_InCartUpsellService_checkForDealbreakers", "_InCartUpsellService_onTestEligibility", "_InCartUpsellService_initializeUpsellStrategy", "_InCartUpsellService_getDataRepository", "_InCartUpsellService_implementControlExperience", "_InCartUpsellService_implementVariantExperience"]
}
